# Development dependencies
CXX = g++-12

# NOT WORKING
# Capture the value of the environment variable HOMEBREW_PREFIX
# HOMEBREW_PREFIX := $(shell echo $$HOMEBREW_PREFIX) 
# HOMEBREW_PREFIX := $(shell echo $(brew --prefix))

# Capture the output of the `arch` command
ARCH := $(shell arch)

# Set HOMEBREW_PREFIX based on the architecture
ifeq ($(ARCH), arm64)
	HOMEBREW_PREFIX := /opt/homebrew
else
	HOMEBREW_PREFIX := /usr/local
endif

INCLUDE := $(HOMEBREW_PREFIX)/include
OPT := $(HOMEBREW_PREFIX)/opt

# Compiler and linker flags
CXXFLAGS = -m64 -fPIC -fno-strict-aliasing -fexceptions -fopenmp -DNDEBUG -DIL_STD -std=c++14 -O3 -I$(INCLUDE) -I$(INCLUDE)/boost
LDFLAGS = -m64 -fPIC -fno-strict-aliasing -fexceptions -fopenmp -DNDEBUG -DIL_STD -static-libgcc -static-libstdc++ -lm -lpthread -ldl \
          $(OPT)/libtiff/lib/libtiff.a \
          $(OPT)/jpeg-turbo/lib/libjpeg.a \
          $(OPT)/zstd/lib/libzstd.a \
          $(OPT)/xz/lib/liblzma.a \
          $(OPT)/zlib/lib/libz.a

# Source files
SRCS = Cell2Fire.cpp Cells.cpp FuelModelSpain.cpp FuelModelKitral.cpp FuelModelFBP.cpp Spotting.cpp ReadCSV.cpp ReadArgs.cpp Lightning.cpp WriteCSV.cpp DataGenerator.cpp

# Object files
OBJS = $(SRCS:.cpp=.o)

# Target executable
TARGET = Cell2Fire

# Build rules
all: $(TARGET)

$(TARGET): $(OBJS)
	$(CXX) -o $(TARGET) $(OBJS) $(LDFLAGS)

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

clean:
	rm -f $(OBJS) $(TARGET)

DESTDIR = /usr/local/bin
install: all
	cp $(TARGETS) $(DESTDIR)
uninstall: all
	rm $(DESTDIR)/$(TARGETS) 

